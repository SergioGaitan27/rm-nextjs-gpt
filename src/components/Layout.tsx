import { useState, ReactNode } from 'react';
import Link from 'next/link';

interface LayoutProps {
  children: ReactNode;
}

const Layout = ({ children }: LayoutProps) => {
  const [isSidebarOpen, setIsSidebarOpen] = useState(false); // Control del estado inicial del sidebar cerrado
  const [isHoveringSidebar, setIsHoveringSidebar] = useState(false); // Controla si el cursor est치 sobre el sidebar

  // Tama침os de 칤conos configurables
  const hamburgerIconSize = "text-5xl"; // Tama침o del 칤cono de hamburguesa
  const categoryIconSize = "text-4xl"; // Tama침o de los 칤conos de categor칤as

  // Espacios configurables
  const spacingBetweenIcons = "mt-20"; // Espacio entre el 칤cono de hamburguesa y los 칤conos de las categor칤as
  const spacingBetweenCategoryIcons = "mb-4"; // Espacio entre los 칤conos de las categor칤as

  // Anchos configurables en p칤xeles
  const sidebarWidthOpen = 256; // Ancho del sidebar cuando est치 abierto (en p칤xeles)
  const sidebarWidthClosed = 80; // Ancho del sidebar cuando est치 cerrado (en p칤xeles)

  const handleMouseEnterHamburger = () => {
    setIsSidebarOpen(true);
  };

  const handleMouseLeaveSidebar = () => {
    setIsSidebarOpen(false);
  };

  const handleSidebarEnter = () => {
    setIsHoveringSidebar(true);
  };

  const handleSidebarLeave = () => {
    setIsHoveringSidebar(false);
    setIsSidebarOpen(false);
  };

  return (
    <div className="flex h-screen bg-black text-white overflow-hidden">
      {/* Sidebar */}
      <div
        className={`fixed top-0 left-0 h-full z-40 transition-transform duration-300 bg-gray-900`}
        style={{ width: isSidebarOpen ? sidebarWidthOpen : sidebarWidthClosed }}
        onMouseEnter={handleSidebarEnter}
        onMouseLeave={handleSidebarLeave}
      >
        {/* Contenedor para los 칤conos */}
        <div className="flex flex-col items-center justify-start pt-4">
          <button
            onMouseEnter={handleMouseEnterHamburger}
            className={`${hamburgerIconSize} text-yellow-500 hover:text-yellow-300`}
          >
            &#9776; {/* 칈cono de hamburguesa Unicode */}
          </button>
          {/* Espacio configurable entre el 칤cono de hamburguesa y los 칤conos de categor칤as */}
          <div className={spacingBetweenIcons}></div>
          <Link href="/point-of-sale" legacyBehavior>
            <a title="/point-of-sale" className={`hover:bg-yellow-500 hover:text-black rounded transition duration-300 ease-in-out transform hover:scale-110 p-2 ${spacingBetweenCategoryIcons}`}>
              <span className={`${categoryIconSize}`}>游눳</span>{isSidebarOpen && <span className="ml-2 text-xl">Punto de Venta</span>}
            </a>
          </Link>
          <Link href="/products" legacyBehavior>
            <a title="/products" className={`hover:bg-yellow-500 hover:text-black rounded transition duration-300 ease-in-out transform hover:scale-110 p-2 ${spacingBetweenCategoryIcons}`}>
              <span className={`${categoryIconSize}`}>游닍</span>{isSidebarOpen && <span className="ml-2 text-xl">Productos</span>}
            </a>
          </Link>
          <Link href="/reports" legacyBehavior>
            <a title="/reports" className={`hover:bg-yellow-500 hover:text-black rounded transition duration-300 ease-in-out transform hover:scale-110 p-2 ${spacingBetweenCategoryIcons}`}>
              <span className={`${categoryIconSize}`}>游늵</span>{isSidebarOpen && <span className="ml-2 text-xl">Reportes</span>}
            </a>
          </Link>
        </div>
      </div>

      {/* 츼rea de contenido principal */}
      <div className={`flex-1 flex flex-col`} style={{ marginLeft: isSidebarOpen ? sidebarWidthOpen : sidebarWidthClosed }}>
        {/* Ajusta el margen izquierdo basado en la visibilidad del sidebar */}
        <main className="flex-1 overflow-x-hidden overflow-y-auto p-4">
          {children}
        </main>
      </div>
    </div>
  );
};

export default Layout;